############################################################ options
# interpreter for shell commands
set shell sh

# set sixel
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
set ratios 1:2:3

set reverse
# icons
set icons

set drawbox

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathnameg  expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7;2m"

############################################################ commands define

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        application/json) lf -remote "send $id \$$EDITOR \$fx";;
				application/x-executable) lf -remote "send $id echo cannot open binary file directly";;
        inode/x-empty) lf -remote "send $id \$$EDITOR \$fx";; # .cjs .sql
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}

cmd bookmark_create ${{
    read ans
    echo $PWD > $LF_BOOKMARK_PATH/$ans
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}


cmd fzf_jump ${{
    res="$(fd . -H --maxdepth 6 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd open-with-gui &$@ $fx ## opens with a gui application outside lf client
cmd open-with-cli $$@ $fx ## opens with a cli application inside lf client


# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) doas ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) doas ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}


cmd yank-dirname $dirname -- "$f" | head -c-1 | wl-copy #; xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | wl-copy #; xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | wl-copy #; xclip -i -selection clipboard
cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
			wl-copy
      # xclip -i -selection clipboard
}}
cmd yank-content ${{
	cat "$fx" | wl-copy #; xclip -i -selection clipboard
}}

cmd lazygit ${{
  lazygit
}}


cmd trash ${{
	set -f
	mv $fx ~/.trash/$(date +"%F")-deleted_$(basename -a -- $fx)
}}


cmd paste-sudo ${{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) doas cp -rn -- "$@" .;;
        move) doas mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# cmd paste &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}
#


cmd newfold ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

############################################################ maps define
# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map xx $$f
map xX !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f


# mkdir command. See wiki if you want it to select created dir
map M :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

map p
map pp :paste
map ps :paste-sudo

# my keybinding

map y :updir
map o :open
map n :down
map e :up

map h
map hh :copy

map d
map dd :cut

map j :search-next
map J :search-prev
map N :updir; set dironly true; down; set dironly false; open
map E :updir; set dironly true; up; set dironly false; open


map gi :lazygit
map hd :yank-dirname
map hp :yank-path
map hn :yank-basename
map h. :yank-basename-without-extension
map hc :yank-content

map pl :link

map xO push :open-with-gui<space> ## input application
map xo push :open-with-cli<space> ## input application

map f :fzf_jump
map gf :fzf_search

map gt :top
map gg :bookmark_jump
map gc :bookmark_create
map gt :top

map T push $touch<space>

map <a-n> newfold

